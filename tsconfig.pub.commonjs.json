{
  "compilerOptions": {
    "outDir": "lib",// 重定向输出目录。
    "module": "commonjs",// 指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。   只有 "AMD"和 "System"能和 --outFile一起使用。    "ES6"和 "ES2015"可使用在目标输出为 "ES5"或更低的情况下。
    "target": "es5",// 指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。 注意： "ESNext"最新的生成目标列表为 ES proposed features
    "lib": ["es6","dom"],// 编译过程中需要引入的库文件的列表。 
    "sourceMap": true, // 生成相应的 .map文件。
    "jsx": "react",// 在 .tsx文件里支持JSX： "React"或 "Preserve"。react 时tsx将变为js文件而不是，且内容是React.createElement
    "moduleResolution": "node",// 决定如何处理模块。或者是 "Node"对于Node.js/io.js，或者是 "Classic"（默认）。module === "AMD" | "System" | "ES6" ? "Classic" : "Node"
    "rootDir": "src/components",// 仅用来控制输出的目录结构   
    "forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的引用。
    "noImplicitReturns": true, // 不是函数的所有返回路径都有返回值时报错
    "noImplicitThis": true,// 当 this表达式的值为 any类型的时候，生成一个错误。
    "noImplicitAny": true, // 在表达式和声明上有隐含的 any类型时报错。
    "strictNullChecks": true, // 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。
    "suppressImplicitAnyIndexErrors": true,// 阻止 --noImplicitAny对缺少索引签名的索引对象报错。查看 issue #1232了解详情。
    "noUnusedLocals": true,// 若有未使用的局部变量则抛错。
    "allowSyntheticDefaultImports": true,// 允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查。
    "experimentalDecorators": true, // 启用实验性的ES装饰器
    "baseUrl": ".",// 解析非相对模块名的基准目录。查看 模块解析文档了解详情。
    "declaration":true, // 生成相应的 .d.ts文件
    "declarationDir":"./lib" // 生成声明文件的输出路径。
    },
    "include": [
      "./src/components/*"
  ],
  "exclude": [
    "node_modules",
    "build",
    "scripts",
    "acceptance-tests",
    "webpack",
    "jest",
    "src/setupTests.ts",
    "lib",
    "es"
  ]
}
